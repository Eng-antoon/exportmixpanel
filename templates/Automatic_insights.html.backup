{% extends "layout.html" %}
{% block content %}
<div class="d-flex justify-content-between align-items-center mb-4">
  <h1 class="mb-0">Trip Insights Dashboard</h1>
  <span class="badge bg-primary fs-6 p-2">Expected Trip Quality Analysis</span>
</div>

<!-- Overview Summary Section -->
<div class="row g-4 mb-4">
  <!-- Trip Quality Summary Card -->
  <div class="col-md-8">
    <div class="card h-100 border-0 shadow-sm animate__animated animate__fadeInUp">
      <div class="card-header bg-white d-flex align-items-center">
        <i class="fas fa-chart-pie me-2 text-primary"></i>
        <h5 class="mb-0">Expected Trip Quality Distribution</h5>
      </div>
      <div class="card-body">
        <div class="row g-3">
          {% set quality_types = {
            "No Logs Trip": "danger",
            "Trip Points Only Exist": "warning",
            "Low Quality Trip": "secondary",
            "Moderate Quality Trip": "info",
            "High Quality Trip": "success",
            "": "light"
          } %}
          
          {% for quality, count in quality_counts.items() %}
            <div class="col-md-6 col-lg-4">
              <div class="p-3 rounded-3 bg-light">
                <div class="d-flex justify-content-between align-items-center mb-2">
                  <span class="text-{{ quality_types[quality] if quality in quality_types else 'secondary' }}">
                    <i class="fas fa-circle me-1"></i>
                    {{ quality if quality else "No Quality Set" }}
                  </span>
                  <h3 class="mb-0">{{ count }}</h3>
                </div>
                <div class="progress" style="height: 6px;">
                  <div class="progress-bar bg-{{ quality_types[quality] if quality in quality_types else 'secondary' }}" 
                       role="progressbar" 
                       style="width: {% if quality_counts.values()|sum > 0 %}{{ (count / quality_counts.values()|sum * 100)|round }}{% else %}0{% endif %}%"></div>
                </div>
              </div>
            </div>
          {% endfor %}
        </div>
      </div>
    </div>
  </div>

  <!-- Distance Summary Card -->
  <div class="col-md-4">
    <div class="card h-100 border-0 shadow-sm animate__animated animate__fadeInUp animate-delay">
      <div class="card-header bg-white d-flex align-items-center">
        <i class="fas fa-route me-2 text-primary"></i>
        <h5 class="mb-0">Distance Analysis</h5>
      </div>
      <div class="card-body">
        <div class="mb-3">
          <div class="d-flex justify-content-between mb-1">
            <span>Manual Distance (Avg)</span>
            <span class="fw-bold">{{ avg_manual|round(2) }}</span>
          </div>
          <div class="d-flex justify-content-between mb-1">
            <span>Calculated Distance (Avg)</span>
            <span class="fw-bold">{{ avg_calculated|round(2) }}</span>
          </div>
          <div class="d-flex justify-content-between mb-1">
            <span>Distance Variance</span>
            <span class="fw-bold {% if avg_distance_variance > 20 %}text-danger{% elif avg_distance_variance > 10 %}text-warning{% else %}text-success{% endif %}">
              {{ avg_distance_variance|round(2) }}%
            </span>
          </div>
        </div>
        
        <h6 class="mt-4 mb-3">Trip Consistency</h6>
        <div class="d-flex align-items-center mb-2">
          <div class="me-3">
            <div class="rounded-circle bg-success d-flex align-items-center justify-content-center text-white fw-bold" 
                 style="width: 50px; height: 50px; font-size: 1.2rem;">
              {{ consistent }}
            </div>
          </div>
          <div>
            <p class="mb-0">Consistent Trips</p>
            <small class="text-muted">Within 10% variance</small>
          </div>
        </div>
        
        <div class="d-flex align-items-center">
          <div class="me-3">
            <div class="rounded-circle bg-danger d-flex align-items-center justify-content-center text-white fw-bold" 
                 style="width: 50px; height: 50px; font-size: 1.2rem;">
              {{ inconsistent }}
            </div>
          </div>
          <div>
            <p class="mb-0">Inconsistent Trips</p>
            <small class="text-muted">Greater than 10% variance</small>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Key Metrics Section -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-percentage me-2 text-primary"></i>
    <h5 class="mb-0">Key Performance Metrics</h5>
  </div>
  <div class="card-body">
    <div class="row g-4">
      <!-- Trip Accuracy Metrics -->
      <div class="col-lg-4">
        <div class="border-start border-4 border-primary ps-3 mb-3">
          <h6 class="text-primary mb-3">Trip Accuracy Metrics</h6>
        </div>
        <div class="mb-3">
          <div class="d-flex justify-content-between align-items-center mb-1">
            <span>Accurate Trips (<10% variance)</span>
            <span class="badge bg-success">{{ accurate_count_pct|round(2) }}%</span>
          </div>
          <small class="text-muted">{{ accurate_count }} trips total</small>
          <div class="progress mt-2" style="height: 6px;">
            <div class="progress-bar bg-success" role="progressbar" style="width: {{ accurate_count_pct|round }}%"></div>
          </div>
        </div>
        
        <div class="mb-3">
          <div class="d-flex justify-content-between align-items-center mb-1">
            <span>App Killed Issue Trips</span>
            <span class="badge bg-danger">{{ app_killed_pct|round(2) }}%</span>
          </div>
          <small class="text-muted">{{ app_killed_count }} trips total</small>
          <div class="progress mt-2" style="height: 6px;">
            <div class="progress-bar bg-danger" role="progressbar" style="width: {{ app_killed_pct|round }}%"></div>
          </div>
        </div>
        
        <div class="mb-3">
          <div class="d-flex justify-content-between align-items-center mb-1">
            <span>Trips with Only 1 Log</span>
            <span class="badge bg-warning">{{ one_log_pct|round(2) }}%</span>
          </div>
          <small class="text-muted">{{ one_log_count }} trips total</small>
          <div class="progress mt-2" style="height: 6px;">
            <div class="progress-bar bg-warning" role="progressbar" style="width: {{ one_log_pct|round }}%"></div>
          </div>
        </div>
      </div>
      
      <!-- Distance Distribution -->
      <div class="col-lg-4">
        <div class="border-start border-4 border-success ps-3 mb-3">
          <h6 class="text-success mb-3">Distance Distribution</h6>
        </div>
        
        <div class="mb-3">
          <div class="d-flex justify-content-between align-items-center mb-1">
            <span>Short Distance Trips</span>
            <span class="badge bg-info">{{ short_dist_pct|round(2) }}%</span>
          </div>
          <div class="progress mt-2" style="height: 10px;">
            <div class="progress-bar bg-info" role="progressbar" style="width: {{ short_dist_pct|round }}%"></div>
          </div>
        </div>
        
        <div class="mb-3">
          <div class="d-flex justify-content-between align-items-center mb-1">
            <span>Medium Distance Trips</span>
            <span class="badge bg-info">{{ medium_dist_pct|round(2) }}%</span>
          </div>
          <div class="progress mt-2" style="height: 10px;">
            <div class="progress-bar bg-info" role="progressbar" style="width: {{ medium_dist_pct|round }}%"></div>
          </div>
        </div>
        
        <div class="mb-3">
          <div class="d-flex justify-content-between align-items-center mb-1">
            <span>Long Distance Trips</span>
            <span class="badge bg-info">{{ long_dist_pct|round(2) }}%</span>
          </div>
          <div class="progress mt-2" style="height: 10px;">
            <div class="progress-bar bg-info" role="progressbar" style="width: {{ long_dist_pct|round }}%"></div>
          </div>
        </div>
      </div>
      
      <!-- App Interaction Metrics -->
      <div class="col-lg-4">
        <div class="border-start border-4 border-warning ps-3 mb-3">
          <h6 class="text-warning mb-3">App Interaction Metrics</h6>
        </div>
        
        <div class="card bg-light border-0 mb-3">
          <div class="card-body py-2">
            <div class="d-flex align-items-center">
              <div class="rounded-circle bg-primary d-flex align-items-center justify-content-center text-white me-3" 
                   style="width: 40px; height: 40px;">
                <i class="fas fa-hand-pointer"></i>
              </div>
              <div>
                <h3 class="mb-0">{{ avg_interactions_per_trip|round(1) }}</h3>
                <small class="text-muted">Avg interactions per trip</small>
              </div>
            </div>
          </div>
        </div>
        
        <div class="card bg-light border-0 mb-3">
          <div class="card-body py-2">
            <div class="d-flex align-items-center">
              <div class="rounded-circle bg-warning d-flex align-items-center justify-content-center text-white me-3" 
                   style="width: 40px; height: 40px;">
                <i class="fas fa-clock"></i>
              </div>
              <div>
                <h3 class="mb-0">{{ avg_interaction_rate|round(1) }}</h3>
                <small class="text-muted">Interactions per hour</small>
              </div>
            </div>
          </div>
        </div>
        
        <div class="card bg-light border-0">
          <div class="card-body py-2">
            <div class="d-flex align-items-center">
              <div class="rounded-circle bg-success d-flex align-items-center justify-content-center text-white me-3" 
                   style="width: 40px; height: 40px;">
                <i class="fas fa-percentage"></i>
              </div>
              <div>
                <h3 class="mb-0">{{ click_efficiency|round(1) }}%</h3>
                <small class="text-muted">Trip points interaction ratio</small>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Driver Behavior Analysis -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-user-check me-2 text-primary"></i>
    <h5 class="mb-0">Driver Behavior Analysis</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">Click on a driver name to see all trips filtered by that driver.</p>
    
    <div class="row g-4">
      <div class="col-md-6 col-lg-4">
        <div class="card h-100 border-success">
          <div class="card-header bg-success text-white">
            <i class="fas fa-medal me-2"></i> High Quality Trips
          </div>
          <div class="card-body">
            <ul class="list-group list-group-flush">
              {% for driver in top_high_drivers %}
              <li class="list-group-item d-flex align-items-center">
                <i class="fas fa-user me-2 text-success"></i>
                <a href="{{ url_for('trips') }}?driver={{ driver }}" class="text-decoration-none">{{ driver }}</a>
              </li>
              {% endfor %}
              {% if not top_high_drivers %}
              <li class="list-group-item text-muted">No drivers found</li>
              {% endif %}
            </ul>
          </div>
        </div>
      </div>
      
      <div class="col-md-6 col-lg-4">
        <div class="card h-100 border-info">
          <div class="card-header bg-info text-white">
            <i class="fas fa-star-half-alt me-2"></i> Moderate Quality Trips
          </div>
          <div class="card-body">
            <ul class="list-group list-group-flush">
              {% for driver in top_moderate_drivers %}
              <li class="list-group-item d-flex align-items-center">
                <i class="fas fa-user me-2 text-info"></i>
                <a href="{{ url_for('trips') }}?driver={{ driver }}" class="text-decoration-none">{{ driver }}</a>
              </li>
              {% endfor %}
              {% if not top_moderate_drivers %}
              <li class="list-group-item text-muted">No drivers found</li>
              {% endif %}
            </ul>
          </div>
        </div>
      </div>
      
      <div class="col-md-6 col-lg-4">
        <div class="card h-100 border-secondary">
          <div class="card-header bg-secondary text-white">
            <i class="fas fa-star me-2"></i> Low Quality Trips
          </div>
          <div class="card-body">
            <ul class="list-group list-group-flush">
              {% for driver in top_low_drivers %}
              <li class="list-group-item d-flex align-items-center">
                <i class="fas fa-user me-2 text-secondary"></i>
                <a href="{{ url_for('trips') }}?driver={{ driver }}" class="text-decoration-none">{{ driver }}</a>
              </li>
              {% endfor %}
              {% if not top_low_drivers %}
              <li class="list-group-item text-muted">No drivers found</li>
              {% endif %}
            </ul>
          </div>
        </div>
      </div>
      
      <div class="col-md-6 col-lg-6">
        <div class="card h-100 border-danger">
          <div class="card-header bg-danger text-white">
            <i class="fas fa-exclamation-triangle me-2"></i> No Logs Trip
          </div>
          <div class="card-body">
            <ul class="list-group list-group-flush">
              {% for driver in top_no_logs_drivers %}
              <li class="list-group-item d-flex align-items-center">
                <i class="fas fa-user me-2 text-danger"></i>
                <a href="{{ url_for('trips') }}?driver={{ driver }}" class="text-decoration-none">{{ driver }}</a>
              </li>
              {% endfor %}
              {% if not top_no_logs_drivers %}
              <li class="list-group-item text-muted">No drivers found</li>
              {% endif %}
            </ul>
          </div>
        </div>
      </div>
      
      <div class="col-md-6 col-lg-6">
        <div class="card h-100 border-warning">
          <div class="card-header bg-warning text-dark">
            <i class="fas fa-map-marker-alt me-2"></i> Trip Points Only Exist
          </div>
          <div class="card-body">
            <ul class="list-group list-group-flush">
              {% for driver in top_points_only_drivers %}
              <li class="list-group-item d-flex align-items-center">
                <i class="fas fa-user me-2 text-warning"></i>
                <a href="{{ url_for('trips') }}?driver={{ driver }}" class="text-decoration-none">{{ driver }}</a>
              </li>
              {% endfor %}
              {% if not top_points_only_drivers %}
              <li class="list-group-item text-muted">No drivers found</li>
              {% endif %}
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Existing chart-based dashboards with enhanced styling -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-chart-pie me-2 text-primary"></i>
    <h5 class="mb-0">Expected Trip Quality Distribution & Segmentation</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This dashboard shows the distribution of expected trip quality scores. It updates automatically based on the Excel and database data.</p>
    <canvas id="qualityDistributionChart"></canvas>
  </div>
</div>

<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-sitemap me-2 text-primary"></i>
    <h5 class="mb-0">Quality Category Drill-Down</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-3">Select a quality category to view the breakdown of device specifications associated with that expected quality segment.</p>
    <select id="qualitySelect" class="form-select mb-4" style="max-width:300px;">
      <option value="High Quality Trip">High Quality Trip</option>
      <option value="Moderate Quality Trip">Moderate Quality Trip</option>
      <option value="Low Quality Trip">Low Quality Trip</option>
      <option value="No Logs Trip">No Logs Trip</option>
      <option value="Trip Points Only Exist">Trip Points Only Exist</option>
    </select>
    <canvas id="qualityDrilldownChart"></canvas>
  </div>
</div>

<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-microchip me-2 text-primary"></i>
    <h5 class="mb-0">Hardware Specification Impact</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the distribution of expected trip quality across different RAM capacities.</p>
    <canvas id="ramChart"></canvas>
  </div>
</div>

<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-cogs me-2 text-primary"></i>
    <h5 class="mb-0">Sensor & Feature Availability</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This grouped bar chart displays the percentage availability of various sensors for each expected trip quality category.</p>
    <canvas id="sensorChart"></canvas>
  </div>
</div>

<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-desktop me-2 text-primary"></i>
    <h5 class="mb-0">OS & Software Impact on Trip Quality</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This stacked bar chart shows how expected trip quality is distributed across different Android versions.</p>
    <canvas id="osQualityChart"></canvas>
  </div>
</div>

<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-industry me-2 text-primary"></i>
    <h5 class="mb-0">Manufacturer & Model Analysis</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This dashboard presents the distribution of expected trip quality across different manufacturers.</p>
    <canvas id="manufacturerChart"></canvas>
  </div>
</div>

<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-truck me-2 text-primary"></i>
    <h5 class="mb-0">Carrier & Device Interaction</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This dashboard shows the distribution of expected trip quality segmented by carrier.</p>
    <canvas id="carrierChart"></canvas>
  </div>
</div>

<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-bicycle me-2 text-primary"></i>
    <h5 class="mb-0">Average Trip Duration vs Expected Trip Quality</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This dashboard shows the average trip duration (in hours) for each expected trip quality category.</p>
    <canvas id="avgTripDurationChart"></canvas>
  </div>
</div>

<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-users me-2 text-primary"></i>
    <h5 class="mb-0">Completed By vs Expected Trip Quality</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This grouped bar chart displays, for each expected quality category, the number of trips completed by each type.</p>
    <canvas id="completedByChart"></canvas>
  </div>
</div>

<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-file-alt me-2 text-primary"></i>
    <h5 class="mb-0">Average Logs Count vs Expected Trip Quality</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the average log count (using coordinate_count) per expected trip quality category.</p>
    <canvas id="avgLogsCountChart"></canvas>
  </div>
</div>

<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-mobile me-2 text-primary"></i>
    <h5 class="mb-0">App Version vs Expected Trip Quality</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This grouped bar chart shows, for each app version, the distribution of expected trip quality categories.</p>
    <canvas id="appVersionChart"></canvas>
  </div>
</div>

<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-exclamation-circle me-2 text-primary"></i>
    <h5 class="mb-0">Lack of Accuracy vs Expected Trip Quality</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This chart shows the relationship between the Lack of Accuracy metric and Expected Trip Quality.</p>
    <canvas id="accuracyChart"></canvas>
  </div>
</div>

<hr class="mt-4">
<h2 class="mt-5">Additional Dynamic Dashboards</h2>

<!-- NEW CHARTS FOR AUTOMATIC INSIGHTS -->

<!-- Expected Quality vs Trip Points Count -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-map-marked-alt me-2 text-primary"></i>
    <h5 class="mb-0">Expected Quality vs Trip Points Count</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the average trip points count for each expected trip quality category.</p>
    <canvas id="tripPointsChart"></canvas>
  </div>
</div>

<!-- Expected Quality vs Driver Clicks Count -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-mouse-pointer me-2 text-primary"></i>
    <h5 class="mb-0">Expected Quality vs Driver Clicks Count</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the average driver clicks count for each expected trip quality category.</p>
    <canvas id="driverClicksChart"></canvas>
  </div>
</div>

<!-- Expected Quality vs Autoending -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-percentage me-2 text-primary"></i>
    <h5 class="mb-0">Expected Quality vs % of Trips with Autoending</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the percentage of trips with autoending for each expected trip quality category.</p>
    <canvas id="autoendingChart"></canvas>
  </div>
</div>

<!-- Pickup Success vs Pickup Failure -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-check-circle me-2 text-primary"></i>
    <h5 class="mb-0">Pickup Success vs Pickup Failure by Expected Quality</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the pickup success percentage for each expected trip quality category.</p>
    <canvas id="pickupChart"></canvas>
  </div>
</div>

<!-- DropOFF Success vs DropOFF Failure -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-times-circle me-2 text-primary"></i>
    <h5 class="mb-0">Dropoff Success vs Dropoff Failure by Expected Quality</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the dropoff success percentage for each expected trip quality category.</p>
    <canvas id="dropoffChart"></canvas>
  </div>
</div>

<!-- Expected Quality vs % Connection Type (Disconnected) -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-wifi me-2 text-primary"></i>
    <h5 class="mb-0">Expected Quality vs % Connection Type (Disconnected)</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the percentage of trips with a disconnected connection for each expected trip quality category.</p>
    <canvas id="connectionChart"></canvas>
  </div>
</div>

<!-- Expected Quality vs % Charging Status (Discharging) -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-battery-full me-2 text-primary"></i>
    <h5 class="mb-0">Expected Quality vs % Charging Status (Discharging)</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the percentage of trips with a discharging charging status for each expected trip quality category.</p>
    <canvas id="chargingChart"></canvas>
  </div>
</div>

<!-- Expected Quality vs Trip Location Logs Count -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-location-arrow me-2 text-primary"></i>
    <h5 class="mb-0">Expected Quality vs Trip Location Logs Count</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the average distance variance (in percentage) between expected and actual logs for each expected trip quality category.</p>
    <canvas id="varianceChart"></canvas>
  </div>
</div>

<!-- Expected Quality vs % GPS Status (false) -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-satellite me-2 text-primary"></i>
    <h5 class="mb-0">Expected Quality vs % GPS Status (false)</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the percentage of trips with a false GPS status for each expected trip quality category.</p>
    <canvas id="gpsChart"></canvas>
  </div>
</div>

<!-- Expected Quality vs % Location Permission (Foreground Fine) -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-location-dot me-2 text-primary"></i>
    <h5 class="mb-0">Expected Quality vs % Location Permission (Foreground Fine)</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the percentage of trips with a foreground fine location permission for each expected trip quality category.</p>
    <canvas id="locationPermissionChart"></canvas>
  </div>
</div>

<!-- Expected Quality vs % Power Saving Mode (False) -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-battery-empty me-2 text-primary"></i>
    <h5 class="mb-0">Expected Quality vs % Power Saving Mode (False)</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the percentage of trips with a false power saving mode for each expected trip quality category.</p>
    <canvas id="powerSavingChart"></canvas>
  </div>
</div>

<!-- Expected Quality vs Driver App Interaction Rate -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-handshake me-2 text-primary"></i>
    <h5 class="mb-0">Expected Quality vs Driver App Interaction Rate</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the average interaction rate (interactions per hour) for each expected trip quality category.</p>
    <canvas id="interactionRateChart"></canvas>
  </div>
</div>

<!-- Expected Quality vs Trip Points Interaction Ratio -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-percentage me-2 text-primary"></i>
    <h5 class="mb-0">Expected Quality vs Trip Points Interaction Ratio</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This bar chart shows the average trip points interaction ratio for each expected trip quality category.</p>
    <canvas id="interactionRatioChart"></canvas>
  </div>
</div>

<!-- Mixpanel Events Section -->
<div class="card mb-4 border-0 shadow-sm animate__animated animate__fadeInUp">
  <div class="card-header bg-white d-flex align-items-center">
    <i class="fas fa-chart-bar me-2 text-primary"></i>
    <h5 class="mb-0">Mixpanel Events Distribution</h5>
  </div>
  <div class="card-body">
    <p class="text-muted mb-4">This section shows the distribution of Mixpanel events.</p>
    <div class="row mb-3">
      <div class="col-md-6">
        <div class="input-group">
          <span class="input-group-text">Search Events</span>
          <input id="searchMixpanelEvents" type="text" class="form-control" placeholder="Type to search...">
        </div>
      </div>
      <div class="col-md-6">
        <div class="card bg-light">
          <div class="card-body py-2">
            <p class="mb-0"><strong>Total Events:</strong> <span id="totalEventsCount">0</span></p>
            <p class="mb-0"><small class="text-muted">Date Range: <span id="mixpanelDateRange"></span></small></p>
          </div>
        </div>
      </div>
    </div>
    
    <div class="table-responsive">
      <table class="table table-striped table-hover">
        <thead>
          <tr>
            <th scope="col">#</th>
            <th scope="col">Event Name</th>
            <th scope="col">Count</th>
            <th scope="col">Percentage</th>
          </tr>
        </thead>
        <tbody id="mixpanelEventsTable">
          <!-- Event data will be populated here -->
        </tbody>
      </table>
    </div>
    
    <div id="noEventsFound" class="alert alert-info mt-3" style="display: none;">
      No events found matching your search criteria.
    </div>
    
    <canvas id="mixpanelEventsChart"></canvas>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
/* Chart initialization code for Automatic Trip Insights Dashboard */
const qualityDistributionData = JSON.parse('{{ quality_counts|tojson }}');
const qualityDrilldownData = JSON.parse('{{ quality_drilldown|tojson }}');
const sensorStats = JSON.parse('{{ sensor_stats|tojson }}');
const qualityByOs = JSON.parse('{{ quality_by_os|tojson }}');
const manufacturerQuality = JSON.parse('{{ manufacturer_quality|tojson }}');
const carrierQuality = JSON.parse('{{ carrier_quality|tojson }}');
const timeSeries = JSON.parse('{{ time_series|tojson }}');
const ramQualityCounts = JSON.parse('{{ ram_quality_counts|tojson }}');

/* Additional new variables for charts or sections might go here if needed, 
   but typically those are displayed in the new cards above, not in chart form. */

function getUniqueColor(index) {
    const colors = [
        'rgba(255, 99, 132, 0.7)',
        'rgba(54, 162, 235, 0.7)',
        'rgba(255, 206, 86, 0.7)',
        'rgba(75, 192, 192, 0.7)',
        'rgba(153, 102, 255, 0.7)',
        'rgba(255, 159, 64, 0.7)',
        'rgba(199, 199, 199, 0.7)',
        'rgba(83, 102, 255, 0.7)'
    ];
    return colors[index % colors.length];
}

// Expected Trip Quality Distribution - Bar Chart
const ctxQualityDistribution = document.getElementById('qualityDistributionChart').getContext('2d');
window.qualityDistributionChart = new Chart(ctxQualityDistribution, {
  type: 'bar',
  data: {
    labels: Object.keys(qualityDistributionData),
    datasets: [{
      label: 'Trip Count',
      data: Object.values(qualityDistributionData),
      backgroundColor: Object.keys(qualityDistributionData).map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    plugins: { title: { display: true, text: 'Expected Trip Quality Distribution' } },
    scales: { x: { stacked: false, ticks: { autoSkip: false } }, y: { beginAtZero: true } }
  }
});

// Quality Drill-Down: Interactive Chart
function renderDrilldownChart(quality) {
  const data = qualityDrilldownData[quality];
  if (!data) return;
  const labels = Object.keys(data.model);
  const modelData = Object.values(data.model);
  const ctxDrilldown = document.getElementById('qualityDrilldownChart').getContext('2d');
  if(window.qualityDrilldownChart && typeof window.qualityDrilldownChart.destroy === 'function') {
      window.qualityDrilldownChart.destroy();
  }
  window.qualityDrilldownChart = new Chart(ctxDrilldown, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{
        label: 'Model Count',
        data: modelData,
        backgroundColor: labels.map((_, i) => getUniqueColor(i))
      }]
    },
    options: {
      plugins: { title: { display: true, text: 'Device Specs Drill-Down for ' + quality + ' Quality Trips' } },
      scales: { x: { stacked: false, ticks: { autoSkip: false } }, y: { beginAtZero: true } }
    }
  });
}

document.getElementById('qualitySelect').addEventListener('change', function() {
  renderDrilldownChart(this.value);
});
renderDrilldownChart(document.getElementById('qualitySelect').value);

// RAM Distribution Chart
let ramLabels = Object.keys(ramQualityCounts);
ramLabels.sort((a, b) => parseInt(a) - parseInt(b));
let qualityLevelsSet = new Set();
ramLabels.forEach(ram => {
  Object.keys(ramQualityCounts[ram]).forEach(q => qualityLevelsSet.add(q));
});
let qualityLevels = Array.from(qualityLevelsSet);
qualityLevels.sort((a, b) => {
  const order = {
    "High Quality Trip": 1,
    "Moderate Quality Trip": 2,
    "Low Quality Trip": 3,
    "No Logs Trip": 4,
    "Trip Points Only Exist": 5,
    "Empty": 6
  };
  return (order[a] || 7) - (order[b] || 7);
});
let datasets = qualityLevels.map((q, i) => {
  return {
    label: q,
    data: ramLabels.map(ram => ramQualityCounts[ram][q] || 0),
    backgroundColor: getUniqueColor(i)
  };
});
const ctxRam = document.getElementById('ramChart').getContext('2d');
window.ramChart = new Chart(ctxRam, {
  type: 'bar',
  data: {
    labels: ramLabels,
    datasets: datasets
  },
  options: {
    plugins: { title: { display: true, text: 'Expected Trip Quality Distribution by RAM' } },
    responsive: true,
    scales: {
      x: { title: { display: true, text: 'RAM Capacity' } },
      y: { beginAtZero: true, title: { display: true, text: 'Number of Trips' } }
    }
  }
});

// Sensor & Feature Availability Chart
const sensorLabels = Object.keys(sensorStats["Fingerprint Sensor"] || {});
let sensorDatasets = [];
Object.keys(sensorStats).forEach((sensor, index) => {
  const data = sensorLabels.map(q => {
    if(sensorStats[sensor][q]) {
      return Math.round((sensorStats[sensor][q].present / sensorStats[sensor][q].total) * 100);
    }
    return 0;
  });
  sensorDatasets.push({
    label: sensor,
    data: data,
    backgroundColor: getUniqueColor(index)
  });
});
const ctxSensor = document.getElementById('sensorChart').getContext('2d');
window.sensorChart = new Chart(ctxSensor, {
  type: 'bar',
  data: {
    labels: sensorLabels,
    datasets: sensorDatasets
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Sensor Availability by Expected Trip Quality (%)'
      }
    },
    scales: {
      x: { stacked: false, ticks: { autoSkip: false } },
      y: { beginAtZero: true, max: 100 }
    }
  }
});

// OS & Software Impact Chart
const osLabels = Object.keys(qualityByOs);
const osDatasets = [];
const qualityCategories = new Set();
Object.values(qualityByOs).forEach(obj => {
  Object.keys(obj).forEach(q => qualityCategories.add(q));
});
Array.from(qualityCategories).forEach((q, index) => {
  const data = osLabels.map(os => qualityByOs[os][q] || 0);
  osDatasets.push({
    label: q,
    data: data,
    backgroundColor: getUniqueColor(index)
  });
});
const ctxOsQuality = document.getElementById('osQualityChart').getContext('2d');
window.osQualityChart = new Chart(ctxOsQuality, {
  type: 'bar',
  data: {
    labels: osLabels,
    datasets: osDatasets
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Expected Trip Quality by Android Version'
      }
    },
    responsive: true,
    scales: {
      x: { stacked: false, ticks: { autoSkip: false } },
      y: { stacked: false, beginAtZero: true }
    }
  }
});

// Manufacturer & Model Analysis Chart
const manuLabels = Object.keys(manufacturerQuality);
const manuDatasets = [];
const manuQualityCategories = new Set();
Object.values(manufacturerQuality).forEach(obj => {
  Object.keys(obj).forEach(q => manuQualityCategories.add(q));
});
manuQualityCategories.forEach((q, index) => {
  const data = manuLabels.map(manu => manufacturerQuality[manu][q] || 0);
  manuDatasets.push({
    label: q,
    data: data,
    backgroundColor: getUniqueColor(index)
  });
});
const ctxManufacturer = document.getElementById('manufacturerChart').getContext('2d');
window.manufacturerChart = new Chart(ctxManufacturer, {
  type: 'bar',
  data: {
    labels: manuLabels,
    datasets: manuDatasets
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Expected Trip Quality by Manufacturer'
      }
    },
    responsive: true,
    scales: {
      x: { stacked: false, ticks: { autoSkip: false } },
      y: { stacked: false, beginAtZero: true }
    }
  }
});

// Carrier & Device Interaction Chart
const carrierLabels = Object.keys(carrierQuality);
const carrierDatasets = [];
const carrierQualityCategories = new Set();
Object.values(carrierQuality).forEach(obj => {
  Object.keys(obj).forEach(q => carrierQualityCategories.add(q));
});
carrierQualityCategories.forEach((q, index) => {
  const data = carrierLabels.map(carrier => carrierQuality[carrier][q] || 0);
  carrierDatasets.push({
    label: q,
    data: data,
    backgroundColor: getUniqueColor(index)
  });
});
const ctxCarrier = document.getElementById('carrierChart').getContext('2d');
window.carrierChart = new Chart(ctxCarrier, {
  type: 'bar',
  data: {
    labels: carrierLabels,
    datasets: carrierDatasets
  },
  options: {
    indexAxis: 'x',
    responsive: true,
    scales: {
      x: { stacked: false, ticks: { autoSkip: false } },
      y: { stacked: false, beginAtZero: true }
    }
  }
});

// Temporal Trends Chart
const timeLabels = Object.keys(timeSeries);
const timeDatasets = [];
const timeQualityCategories = new Set();
Object.values(timeSeries).forEach(obj => {
  Object.keys(obj).forEach(q => timeQualityCategories.add(q));
});
timeQualityCategories.forEach((q, index) => {
  const datasetData = timeLabels.map(date => timeSeries[date][q] || 0);
  timeDatasets.push({
    label: q,
    data: datasetData,
    backgroundColor: getUniqueColor(index),
    borderColor: getUniqueColor(index).replace('0.7', '1'),
    fill: false
  });
});

// Average Trip Duration vs Expected Trip Quality
const avgTripDurationData = JSON.parse('{{ avg_trip_duration_quality|tojson }}');
const durationLabels = Object.keys(avgTripDurationData);
const durationValues = Object.values(avgTripDurationData);
const ctxAvgTripDuration = document.getElementById('avgTripDurationChart').getContext('2d');
new Chart(ctxAvgTripDuration, {
  type: 'bar',
  data: {
    labels: durationLabels,
    datasets: [{
      label: 'Average Trip Duration (h)',
      data: durationValues,
      backgroundColor: durationLabels.map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    scales: {
      y: { beginAtZero: true }
    }
  }
});

// Completed By vs Expected Trip Quality
const completedByData = JSON.parse('{{ completed_by_quality|tojson }}');
const qualityCategoriesForCompleted = Object.keys(completedByData);
let completionTypes = new Set();
qualityCategoriesForCompleted.forEach(q => {
  Object.keys(completedByData[q]).forEach(type => completionTypes.add(type));
});
completionTypes = Array.from(completionTypes);
const completedByChartDatasets = completionTypes.map((type, index) => {
  const data = qualityCategoriesForCompleted.map(q => completedByData[q][type] || 0);
  return {
    label: type,
    data: data,
    backgroundColor: getUniqueColor(index)
  };
});
const ctxCompletedBy = document.getElementById('completedByChart').getContext('2d');
new Chart(ctxCompletedBy, {
  type: 'bar',
  data: {
    labels: qualityCategoriesForCompleted,
    datasets: completedByChartDatasets
  },
  options: {
    scales: {
      x: { stacked: false },
      y: { beginAtZero: true }
    }
  }
});

// Average Logs Count vs Expected Trip Quality
const avgLogsCountData = JSON.parse('{{ avg_logs_count_quality|tojson }}');
const logsLabels = Object.keys(avgLogsCountData);
const logsValues = Object.values(avgLogsCountData);
const ctxAvgLogs = document.getElementById('avgLogsCountChart').getContext('2d');
new Chart(ctxAvgLogs, {
  type: 'bar',
  data: {
    labels: logsLabels,
    datasets: [{
      label: 'Average Logs Count',
      data: logsValues,
      backgroundColor: logsLabels.map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    scales: {
      y: { beginAtZero: true }
    }
  }
});

// App Version vs Expected Trip Quality
const appVersionQualityData = JSON.parse('{{ app_version_quality|tojson }}');
const appVersionLabels = Object.keys(appVersionQualityData);
let qualityCategoriesApp = new Set();
appVersionLabels.forEach(appVer => {
  Object.keys(appVersionQualityData[appVer]).forEach(q => qualityCategoriesApp.add(q));
});
qualityCategoriesApp = Array.from(qualityCategoriesApp);
const appVersionDatasets = qualityCategoriesApp.map((quality, index) => {
  const data = appVersionLabels.map(appVer => appVersionQualityData[appVer][quality] || 0);
  return {
    label: quality,
    data: data,
    backgroundColor: getUniqueColor(index)
  };
});
const ctxAppVersion = document.getElementById('appVersionChart').getContext('2d');
new Chart(ctxAppVersion, {
  type: 'bar',
  data: {
    labels: appVersionLabels,
    datasets: appVersionDatasets
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'App Version vs Expected Trip Quality'
      }
    },
    scales: {
      x: { stacked: false, ticks: { autoSkip: false } },
      y: { beginAtZero: true }
    }
  }
});

// Lack of Accuracy vs Expected Trip Quality
const accuracyData = JSON.parse('{{ accuracy_data|default({})|tojson }}');
const ctxAccuracy = document.getElementById('accuracyChart').getContext('2d');
window.accuracyChart = new Chart(ctxAccuracy, {
  type: 'bar',
  data: {
    labels: Object.keys(accuracyData),
    datasets: [{
      label: 'Average Lack of Accuracy',
      data: Object.values(accuracyData),
      backgroundColor: Object.keys(accuracyData).map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Lack of Accuracy vs Expected Trip Quality'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false }, title: { display: true, text: 'Trip Quality' } },
      y: { beginAtZero: true, title: { display: true, text: 'Avg Lack of Accuracy' } }
    }
  }
});

// Expected Quality vs Trip Points Count
const tripPointsData = JSON.parse('{{ avg_trip_points_by_quality|tojson }}');
const ctxTripPoints = document.getElementById('tripPointsChart').getContext('2d');
new Chart(ctxTripPoints, {
  type: 'bar',
  data: {
    labels: Object.keys(tripPointsData),
    datasets: [{
      label: 'Average Trip Points Count',
      data: Object.values(tripPointsData),
      backgroundColor: Object.keys(tripPointsData).map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Expected Quality vs Trip Points Count'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false } },
      y: { beginAtZero: true, title: { display: true, text: 'Avg Trip Points Count' } }
    }
  }
});

// Expected Quality vs Driver Clicks Count
const driverClicksData = JSON.parse('{{ avg_driver_clicks_by_quality|tojson }}');
const ctxDriverClicks = document.getElementById('driverClicksChart').getContext('2d');
new Chart(ctxDriverClicks, {
  type: 'bar',
  data: {
    labels: Object.keys(driverClicksData),
    datasets: [{
      label: 'Average Driver Clicks Count',
      data: Object.values(driverClicksData),
      backgroundColor: Object.keys(driverClicksData).map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Expected Quality vs Driver Clicks Count'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false } },
      y: { beginAtZero: true, title: { display: true, text: 'Avg Driver Clicks Count' } }
    }
  }
});

// Expected Quality vs Autoending
const autoendingData = JSON.parse('{{ autoending_percentages|tojson }}');
const ctxAutoending = document.getElementById('autoendingChart').getContext('2d');
new Chart(ctxAutoending, {
  type: 'bar',
  data: {
    labels: Object.keys(autoendingData),
    datasets: [{
      label: '% of Trips with Autoending',
      data: Object.values(autoendingData),
      backgroundColor: Object.keys(autoendingData).map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Expected Quality vs % of Trips with Autoending'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false } },
      y: { 
        beginAtZero: true, 
        max: 100,
        title: { display: true, text: '% of Trips' } 
      }
    }
  }
});

// Pickup Success vs Pickup Failure
const pickupDropoffData = JSON.parse('{{ pickup_dropoff_stats|tojson }}');
const pickupLabels = Object.keys(pickupDropoffData);
const pickupSuccessData = pickupLabels.map(q => {
  const total = pickupDropoffData[q].total || 1; // Avoid division by zero
  return (pickupDropoffData[q].pickup_success / total) * 100;
});
const pickupFailureData = pickupLabels.map(q => {
  const total = pickupDropoffData[q].total || 1; // Avoid division by zero
  return (pickupDropoffData[q].pickup_failure / total) * 100;
});

const ctxPickup = document.getElementById('pickupChart').getContext('2d');
new Chart(ctxPickup, {
  type: 'bar',
  data: {
    labels: pickupLabels,
    datasets: [
      {
        label: 'Pickup Success %',
        data: pickupSuccessData,
        backgroundColor: 'rgba(75, 192, 192, 0.7)'
      },
      {
        label: 'Pickup Failure %',
        data: pickupFailureData,
        backgroundColor: 'rgba(255, 99, 132, 0.7)'
      }
    ]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Pickup Success vs Pickup Failure by Expected Quality'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false } },
      y: { 
        beginAtZero: true, 
        max: 100,
        title: { display: true, text: 'Percentage (%)' } 
      }
    }
  }
});

// DropOFF Success vs DropOFF Failure
const dropoffSuccessData = pickupLabels.map(q => {
  const total = pickupDropoffData[q].total || 1; // Avoid division by zero
  return (pickupDropoffData[q].dropoff_success / total) * 100;
});
const dropoffFailureData = pickupLabels.map(q => {
  const total = pickupDropoffData[q].total || 1; // Avoid division by zero
  return (pickupDropoffData[q].dropoff_failure / total) * 100;
});

const ctxDropoff = document.getElementById('dropoffChart').getContext('2d');
new Chart(ctxDropoff, {
  type: 'bar',
  data: {
    labels: pickupLabels,
    datasets: [
      {
        label: 'Dropoff Success %',
        data: dropoffSuccessData,
        backgroundColor: 'rgba(75, 192, 192, 0.7)'
      },
      {
        label: 'Dropoff Failure %',
        data: dropoffFailureData,
        backgroundColor: 'rgba(255, 99, 132, 0.7)'
      }
    ]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Dropoff Success vs Dropoff Failure by Expected Quality'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false } },
      y: { 
        beginAtZero: true, 
        max: 100,
        title: { display: true, text: 'Percentage (%)' } 
      }
    }
  }
});

// Expected Quality vs % Connection Type (Disconnected)
const connectionData = JSON.parse('{{ connection_percentages|tojson }}');
const connectionLabels = Object.keys(connectionData);
const disconnectedData = connectionLabels.map(q => connectionData[q].disconnected || 0);
const lteData = connectionLabels.map(q => connectionData[q].lte || 0);

const ctxConnection = document.getElementById('connectionChart').getContext('2d');
new Chart(ctxConnection, {
  type: 'bar',
  data: {
    labels: connectionLabels,
    datasets: [
      {
        label: '% Disconnected',
        data: disconnectedData,
        backgroundColor: 'rgba(255, 99, 132, 0.7)'
      },
      {
        label: '% LTE',
        data: lteData,
        backgroundColor: 'rgba(54, 162, 235, 0.7)'
      }
    ]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Expected Quality vs Connection Type & Sub Type'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false } },
      y: { 
        beginAtZero: true, 
        max: 100,
        title: { display: true, text: 'Percentage (%)' } 
      }
    }
  }
});

// Expected Quality vs % Charging Status (Discharging)
const chargingData = JSON.parse('{{ charging_percentages|tojson }}');
const ctxCharging = document.getElementById('chargingChart').getContext('2d');
new Chart(ctxCharging, {
  type: 'bar',
  data: {
    labels: Object.keys(chargingData),
    datasets: [{
      label: '% Discharging',
      data: Object.values(chargingData),
      backgroundColor: Object.keys(chargingData).map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Expected Quality vs % Charging Status (Discharging)'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false } },
      y: { 
        beginAtZero: true, 
        max: 100,
        title: { display: true, text: '% Discharging' } 
      }
    }
  }
});

// Expected Quality vs Trip Location Logs Count
const varianceData = JSON.parse('{{ avg_variance_by_quality|tojson }}');
const ctxVariance = document.getElementById('varianceChart').getContext('2d');
new Chart(ctxVariance, {
  type: 'bar',
  data: {
    labels: Object.keys(varianceData),
    datasets: [{
      label: 'Average Distance Variance (%)',
      data: Object.values(varianceData),
      backgroundColor: Object.keys(varianceData).map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Expected Quality vs Trip Location Logs Count'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false } },
      y: { 
        beginAtZero: true,
        title: { display: true, text: 'Avg Variance (%)' } 
      }
    }
  }
});

// Expected Quality vs % GPS Status (false)
const gpsData = JSON.parse('{{ gps_percentages|tojson }}');
const ctxGps = document.getElementById('gpsChart').getContext('2d');
new Chart(ctxGps, {
  type: 'bar',
  data: {
    labels: Object.keys(gpsData),
    datasets: [{
      label: '% GPS Status False',
      data: Object.values(gpsData),
      backgroundColor: Object.keys(gpsData).map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Expected Quality vs % GPS Status (false)'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false } },
      y: { 
        beginAtZero: true, 
        max: 100,
        title: { display: true, text: '% GPS Status False' } 
      }
    }
  }
});

// Expected Quality vs % Location Permission (Foreground Fine)
const locationPermissionData = JSON.parse('{{ location_permission_percentages|tojson }}');
const ctxLocationPermission = document.getElementById('locationPermissionChart').getContext('2d');
new Chart(ctxLocationPermission, {
  type: 'bar',
  data: {
    labels: Object.keys(locationPermissionData),
    datasets: [{
      label: '% Foreground Fine',
      data: Object.values(locationPermissionData),
      backgroundColor: Object.keys(locationPermissionData).map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Expected Quality vs % Location Permission (Foreground Fine)'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false } },
      y: { 
        beginAtZero: true, 
        max: 100,
        title: { display: true, text: '% Foreground Fine' } 
      }
    }
  }
});

// Expected Quality vs % Power Saving Mode (False)
const powerSavingData = JSON.parse('{{ power_saving_percentages|tojson }}');
const ctxPowerSaving = document.getElementById('powerSavingChart').getContext('2d');
new Chart(ctxPowerSaving, {
  type: 'bar',
  data: {
    labels: Object.keys(powerSavingData),
    datasets: [{
      label: '% Power Saving Mode False',
      data: Object.values(powerSavingData),
      backgroundColor: Object.keys(powerSavingData).map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Expected Quality vs % Power Saving Mode (False)'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false } },
      y: { 
        beginAtZero: true, 
        max: 100,
        title: { display: true, text: '% Power Saving Mode False' } 
      }
    }
  }
});

// Expected Quality vs Driver App Interaction Rate
const interactionRateData = JSON.parse('{{ avg_interaction_rate_by_quality|tojson }}');
const ctxInteractionRate = document.getElementById('interactionRateChart').getContext('2d');
new Chart(ctxInteractionRate, {
  type: 'bar',
  data: {
    labels: Object.keys(interactionRateData),
    datasets: [{
      label: 'Average Interaction Rate (interactions/hour)',
      data: Object.values(interactionRateData),
      backgroundColor: Object.keys(interactionRateData).map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Expected Quality vs Driver App Interaction Rate'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false } },
      y: { 
        beginAtZero: true,
        title: { display: true, text: 'Interactions/Hour' } 
      }
    }
  }
});

// Expected Quality vs Trip Points Interaction Ratio
const interactionRatioData = JSON.parse('{{ avg_interaction_ratio_by_quality|tojson }}');
const ctxInteractionRatio = document.getElementById('interactionRatioChart').getContext('2d');
new Chart(ctxInteractionRatio, {
  type: 'bar',
  data: {
    labels: Object.keys(interactionRatioData),
    datasets: [{
      label: 'Average Trip Points Interaction Ratio (%)',
      data: Object.values(interactionRatioData),
      backgroundColor: Object.keys(interactionRatioData).map((_, i) => getUniqueColor(i))
    }]
  },
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Expected Quality vs Trip Points Interaction Ratio'
      }
    },
    scales: {
      x: { ticks: { autoSkip: false } },
      y: { 
        beginAtZero: true,
        title: { display: true, text: 'Interaction Ratio (%)' } 
      }
    }
  }
});

// Mixpanel Events Functionality
(function() {
  // DOM elements
  const refreshButton = document.getElementById('refreshMixpanelEvents');
  const loadingElement = document.getElementById('mixpanelEventsLoading');
  const contentElement = document.getElementById('mixpanelEventsContent');
  const errorElement = document.getElementById('mixpanelEventsError');
  const searchInput = document.getElementById('searchMixpanelEvents');
  const eventsTable = document.getElementById('mixpanelEventsTable');
  const totalEventsElement = document.getElementById('totalEventsCount');
  const dateRangeElement = document.getElementById('mixpanelDateRange');
  const noEventsFoundElement = document.getElementById('noEventsFound');
  
  // Get date range from URL parameters or from server-provided values
  function getDateRange() {
    const urlParams = new URLSearchParams(window.location.search);
    
    // Check if start_date and end_date are passed by the server
    let serverStartDate = '{{ start_date }}';
    let serverEndDate = '{{ end_date }}';
    
    // Use URL parameters, server-provided values, or defaults (in that order of priority)
    let endDate = urlParams.get('end_date');
    let startDate = urlParams.get('start_date');
    
    if (!endDate && serverEndDate && serverEndDate !== 'None') {
      endDate = serverEndDate;
    }
    
    if (!startDate && serverStartDate && serverStartDate !== 'None') {
      startDate = serverStartDate;
    }
    
    // If still no values, use defaults
    if (!endDate) {
      const today = new Date();
      endDate = today.toISOString().split('T')[0];
    }
    
    if (!startDate) {
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      startDate = thirtyDaysAgo.toISOString().split('T')[0];
    }
    
    return { startDate, endDate };
  }
  
  // Store current event data
  let currentEventData = null;
  let mixpanelEventsChart = null;
  
  // Fetch Mixpanel events data
  function fetchMixpanelEvents() {
    const { startDate, endDate } = getDateRange();
    
    // Show loading state
    loadingElement.style.display = 'block';
    contentElement.style.display = 'none';
    errorElement.style.display = 'none';
    
    fetch(`/mixpanel_events?start_date=${startDate}&end_date=${endDate}`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        // Store the data
        currentEventData = data;
        
        // Update UI
        updateEventsUI(data);
        
        // Hide loading, show content
        loadingElement.style.display = 'none';
        contentElement.style.display = 'block';
      })
      .catch(error => {
        console.error('Error fetching Mixpanel events:', error);
        
        // Hide loading, show error
        loadingElement.style.display = 'none';
        errorElement.style.display = 'block';
        errorElement.textContent = `Error loading Mixpanel events data: ${error.message}`;
      });
  }
  
  // Update the UI with events data
  function updateEventsUI(data, searchTerm = '') {
    if (!data || !data.events) {
      return;
    }
    
    // Update total count and date range
    totalEventsElement.textContent = data.total_count.toLocaleString();
    dateRangeElement.textContent = `${data.start_date} to ${data.end_date}`;
    
    // Filter events based on search term if provided
    const filteredEvents = searchTerm
      ? data.events.filter(event => 
          event.name.toLowerCase().includes(searchTerm.toLowerCase()))
      : data.events;
    
    // Clear existing table rows
    eventsTable.innerHTML = '';
    
    // Check if we have events after filtering
    if (filteredEvents.length === 0) {
      noEventsFoundElement.style.display = 'block';
    } else {
      noEventsFoundElement.style.display = 'none';
      
      // Add events to the table
      filteredEvents.forEach((event, index) => {
        const percentage = ((event.count / data.total_count) * 100).toFixed(2);
        
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${index + 1}</td>
          <td>${event.name}</td>
          <td>${event.count.toLocaleString()}</td>
          <td>${percentage}%</td>
        `;
        
        eventsTable.appendChild(row);
      });
    }
    
    // Update chart
    updateEventsChart(filteredEvents);
  }
  
  // Update or create the events chart
  function updateEventsChart(events) {
    // Get top 10 events for the chart
    const chartEvents = events.slice(0, 10);
    
    // Prepare chart data
    const chartData = {
      labels: chartEvents.map(e => e.name),
      datasets: [{
        label: 'Event Count',
        data: chartEvents.map(e => e.count),
        backgroundColor: chartEvents.map((_, i) => getUniqueColor(i))
      }]
    };
    
    // Get the canvas context
    const ctx = document.getElementById('mixpanelEventsChart').getContext('2d');
    
    // Destroy existing chart if it exists
    if (mixpanelEventsChart) {
      mixpanelEventsChart.destroy();
    }
    
    // Create new chart
    mixpanelEventsChart = new Chart(ctx, {
      type: 'bar',
      data: chartData,
      options: {
        responsive: true,
        plugins: {
          legend: {
            display: false
          },
          title: {
            display: true,
            text: 'Top 10 Mixpanel Events'
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              callback: function(value) {
                return value.toLocaleString();
              }
            }
          }
        }
      }
    });
  }
  
  // Event listeners
  refreshButton.addEventListener('click', fetchMixpanelEvents);
  
  // Search functionality
  searchInput.addEventListener('input', function(e) {
    const searchTerm = e.target.value.trim();
    if (currentEventData) {
      updateEventsUI(currentEventData, searchTerm);
    }
  });
  
  // Initial load
  fetchMixpanelEvents();
})();
</script>
{% endblock %}
